// vim: set ft=groovy ts=4 sw=4:
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// *
// *              C E D A R
// *          S O L U T I O N S       "Software done right."
// *           S O F T W A R E
// *
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// *
// * Copyright (c) 2013,2015 Kenneth J. Pronovici.
// * All rights reserved.
// *
// * This program is free software; you can redistribute it and/or
// * modify it under the terms of the Apache License, Version 2.0.
// * See LICENSE for more information about the licensing terms.
// *
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// *
// * Author   : Kenneth J. Pronovici <pronovic@ieee.org>
// * Language : Gradle (>= 2.5)
// * Project  : Common Build Functionality
// *
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// http://stackoverflow.com/questions/1163173/why-use-gradle-instead-of-ant-or-maven

// ***************
// * Gradle setup
// *************** 

// Dump the Gradle home directory, which is useful during Jenkins builds
logger.lifecycle("Gradle home directory: $gradle.startParameter.gradleUserHomeDir")

// Plugins
apply plugin: "base"
apply plugin: "groovy"
apply plugin: "cedarBuild"
apply plugin: "cedarCopyright"
apply plugin: "cedarPublish"
apply plugin: "cedarJavadoc"

// Load properties from standard configuration files (build.properties and local.properties)
cedarProperties.loadStandardProperties()


// ************************
// * Project configuration
// ************************

// Note: I'm doing something a little goofy here.  This project creates the
// gradle plugin that's published to Maven.  However, I also want to *use* that
// functionality to do the build (particularly the jar signing stuff).  So, I'm
// kind of bootstrapping the plugin with itself.  The plugin lives in the
// Gradle buildSrc directory so it can be used by this script, but then the
// buildSrc artifacts are used to create the published jar file.

group = "com.googlecode.cedar-common"
def artifactId = "cedar-build"
version = config_mavenPublishVersion

sourceCompatibility = JavaVersion.VERSION_1_6
targetCompatibility = JavaVersion.VERSION_1_6

// There's no need for this now, because I've fixed all the warnings.
//gradle.projectsEvaluated {
//   tasks.withType(JavaCompile) {
//        options.compilerArgs << "-Xlint:unchecked"
//    }
//}

tasks.publish.dependsOn += [ label, ] 

dependencies {
    compile gradleApi()
    compile localGroovy()
    compile "com.google.appengine:gradle-appengine-plugin:1.9.23"
    compile "org.codehaus.javancss:javancss:32.53"
    compile "io.fastjson:boon:0.33"
}

cedarLabel {
    enabled = config_mercurialLabelEnabled
    projectName = "CedarBuild"
    projectVersion = config_mavenPublishVersion
    repositories = [ projectDir, ]
    mercurialPath = config_mercurialPath
}

cedarCopyright {
    licensePattern = '^.*LICENSE$'
    sourcePatterns = [ '^.*\\.java$', '^.*\\.groovy$', '^.*\\.gradle$', ]
    repositories = [ projectDir, ]
    mercurialPath = config_mercurialPath
}

cedarSigning {
    gpgKeyId = config_gpgKeyId
    gpgSecretKey = config_gpgSecretKey
    projects = allprojects
}

cedarJavadoc {
    title = "${artifactId} ${config_mavenPublishVersion} API"
    output = "${project.docsDir}/javadoc"
    classpath = { project.configurations.runtime }
    srcDirs = { [ "buildSrc/src/main/java", ] }
    subpackages = [ "com" ]
}

jar {
    from "buildSrc/build/classes/main"
    from "buildSrc/build/resources/main"
}

task javadocJar(type: Jar, dependsOn: jdoc) {
    classifier = "javadoc"
    archiveName = "cedar-build-${baseName}-${version}-${classifier}.${extension}"
    from "${project.docsDir}/javadoc"
}

task sourcesJar(type: Jar) {
    classifier = "sources"
    from "buildSrc/src/main"
    excludes = [ ".settings", ".project", ".classpath", ".gradle", "build", ]
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

signing {
    required = { cedarPublish.isSignatureRequired() }
    sign jar
    sign javadocJar
    sign sourcesJar
}

cedarPublish {
    mavenRepositoryUrl = config_mavenRepositoryUrl
    mavenRepositoryUser = config_mavenRepositoryUser
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: cedarPublish.getPublishRepositoryUrl()) {
                authentication(userName: cedarPublish.getMavenRepositoryUser(), password: project.convention.plugins.cedarPublish.getMavenRepositoryPassword())
            }
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            pom.artifactId = artifactId
            pom.project {
                name "Cedar Build Functionality"
                description "Gradle plugins and other functionality for use with a standardized build process."
                url "https://code.google.com/p/cedar-common/"
                scm {
                    url "scm:hg:https://code.google.com/p/cedar-common.build/"
                    connection "scm:hg:https://code.google.com/p/cedar-common.build/"
                    developerConnection "scm:hg:https://code.google.com/p/cedar-common.build/"
                }
                licenses {
                    license {
                        name "The Apache Software License, Version 2.0"
                        url "http://www.apache.org/license/LICENSE-2.0.txt"
                        distribution "repo"
                    }
                }
                developers {
                    developer {
                        id "pronovic"
                        name "Kenneth J. Pronovici"
                        email "pronovic@ieee.org"
                    }
                }
            }
        }
    }
}

install {
    repositories.mavenInstaller {
        pom.artifactId = artifactId
    }
}


// **********************
// * General build tasks
// **********************

// Generate XML bindings for the Mercurial XML output (used by the copyright tool)
task generateHgBindings << {
    def resourcesDir = "gradle/resources"
    def generatedDir = "buildSrc/src/main/java"
    def schemaDir = generatedDir + "/com/cedarsolutions/xml/schema/hg/log"
    def bindingsDir = generatedDir + "/com/cedarsolutions/xml/bindings/hg/log"
    def bindingsPackage = "com.cedarsolutions.xml.bindings.hg.log"
    def sourceXml = resourcesDir + "/hglog.xml"
    def schema = schemaDir + "/hglog.xsd"

    file(schemaDir).mkdirs()
    file(bindingsDir).mkdirs()

    ant.delete(quiet : "true") {
        fileset(dir: schemaDir, includes : "*.xsd")
        fileset(dir: bindingsDir, includes : "**/*.java")
    }

    ant.java(jar : config_trangJarPath, fork : "true", failonerror : "true") {
        arg(value : sourceXml)
        arg(value : schema)
    }

    ant.exec(executable : config_xjcPath) {
        arg(value : "-d")
        arg(value : generatedDir)
        arg(value : "-p")
        arg(value : bindingsPackage)
        arg(value : "-xmlschema")
        arg(value : schema)
    }
}

// Generate all XML bindings
task generateXmlBindings(dependsOn: generateHgBindings)

