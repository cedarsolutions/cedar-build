// vim: set ft=groovy:
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// *
// *              C E D A R
// *          S O L U T I O N S       "Software done right."
// *           S O F T W A R E
// *
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// *
// * Copyright (c) 2013 Kenneth J. Pronovici.
// * All rights reserved.
// *
// * This program is free software; you can redistribute it and/or
// * modify it under the terms of the Apache License, Version 2.0.
// * See LICENSE for more information about the licensing terms.
// *
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// *
// * Author   : Kenneth J. Pronovici <pronovic@ieee.org>
// * Language : Gradle (>= 1.7)
// * Project  : Common Build Functionality
// *
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// http://stackoverflow.com/questions/1163173/why-use-gradle-instead-of-ant-or-maven

// ***************
// * Gradle setup
// *************** 

// Plugins
apply plugin: "base"
apply plugin: "groovy"
apply plugin: "cedarBuild"
apply plugin: "cedarCopyright"
apply plugin: "cedarPublish"

// Load properties from standard configuration files (build.properties and local.properties)
cedarProperties.loadStandardProperties()


// ************************
// * Project configuration
// ************************

// Note: I'm doing something a little goofy here.  This project creates the
// gradle plugin that's published to Maven.  However, I also want to *use* that
// functionality to do the build (particularly the jar signing stuff).  So, I'm
// kind of bootstrapping the plugin with itself.  The plugin lives in the
// Gradle buildSrc directory so it can be used by this script, but then the
// buildSrc artifacts are used to create the published jar file.

group = "com.googlecode.cedar-common"
def artifactId = "cedar-build"
version = config_mavenPublishVersion

dependencies {
   compile gradleApi()
   compile localGroovy()
}

cedarLabel {
   projectName = "CedarBuild"
   projectVersion = config_mavenPublishVersion
   repositories = [ projectDir, ]
   mercurialPath = config_mercurialPath
}

cedarCopyright {
   licensePattern = '^.*LICENSE$'
   sourcePatterns = [ '^.*\\.java$', '^.*\\.groovy$', '^.*\\.gradle$', ]
   repositories = [ projectDir, ]
   mercurialPath = config_mercurialPath
}

cedarSigning {
   gpgKeyId = config_gpgKeyId
   gpgSecretKey = config_gpgSecretKey
   projects = allprojects
}

jar {
   from "buildSrc/build/classes/main"
   from "buildSrc/build/resources/main"
}

artifacts {
   archives jar
}

signing {
   required = { cedarPublish.isSignatureRequired() }
   sign jar
}

cedarPublish {
   mercurialMavenProject = config_mercurialMavenProject
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: cedarPublish.getPublishRepositoryUrl())
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            pom.artifactId = artifactId
            pom.project {
               name "Cedar Build Functionality"
               description "Gradle plugins and other functionality for use with a standardized build process."
               url "https://code.google.com/p/cedar-common/"
               scm {
                  url "scm:hg:https://code.google.com/p/cedar-common.build/"
                  connection "scm:hg:https://code.google.com/p/cedar-common.build/"
                  developerConnection "scm:hg:https://code.google.com/p/cedar-common.build/"
               }
               licenses {
                  license {
                     name "The Apache Software License, Version 2.0"
                     url "http://www.apache.org/license/LICENSE-2.0.txt"
                     distribution "repo"
                  }
               }
               developers {
                  developer {
                     id "pronovic"
                     name "Kenneth J. Pronovici"
                     email "pronovic@ieee.org"
                  }
               }
            }
        }
    }
}

install {
   repositories.mavenInstaller {
      pom.artifactId = artifactId
   }
}


// **********************
// * General build tasks
// **********************

// Generate XML bindings for the Mercurial XML output (used by the copyright tool)
task generateHgBindings << {
   def resourcesDir = "gradle/resources"
   def generatedDir = "buildSrc/src/main/java"
   def schemaDir = generatedDir + "/com/cedarsolutions/xml/schema/hg/log"
   def bindingsDir = generatedDir + "/com/cedarsolutions/xml/bindings/hg/log"
   def bindingsPackage = "com.cedarsolutions.xml.bindings.hg.log"
   def sourceXml = resourcesDir + "/hglog.xml"
   def schema = schemaDir + "/hglog.xsd"

   file(schemaDir).mkdirs()
   file(bindingsDir).mkdirs()

   ant.delete(quiet : "true") {
      fileset(dir: schemaDir, includes : "*.xsd")
      fileset(dir: bindingsDir, includes : "**/*.java")
   }

   ant.java(jar : config_trangJarPath, fork : "true", failonerror : "true") {
      arg(value : sourceXml)
      arg(value : schema)
   }

   ant.exec(executable : config_xjcPath) {
      arg(value : "-d")
      arg(value : generatedDir)
      arg(value : "-p")
      arg(value : bindingsPackage)
      arg(value : "-xmlschema")
      arg(value : schema)
   }
}

// Generate all XML bindings
task generateXmlBindings(dependsOn: generateHgBindings)

